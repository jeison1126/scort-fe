import { inject, makeEnvironmentProviders } from '@angular/core';
import { NGX_MASK_CONFIG, INITIAL_CONFIG, initialConfig, NEW_CONFIG, } from './ngx-mask.config';
import { NgxMaskApplierService } from './ngx-mask-applier.service';
/**
 * @internal
 */
function _configFactory() {
    const initConfig = inject(INITIAL_CONFIG);
    const configValue = inject(NEW_CONFIG);
    return configValue instanceof Function
        ? { ...initConfig, ...configValue() }
        : { ...initConfig, ...configValue };
}
export function provideNgxMask(configValue) {
    return [
        {
            provide: NEW_CONFIG,
            useValue: configValue,
        },
        {
            provide: INITIAL_CONFIG,
            useValue: initialConfig,
        },
        {
            provide: NGX_MASK_CONFIG,
            useFactory: _configFactory,
        },
        NgxMaskApplierService,
    ];
}
export function provideEnvironmentNgxMask(configValue) {
    return makeEnvironmentProviders(provideNgxMask(configValue));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LW1hc2sucHJvdmlkZXJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LW1hc2stbGliL3NyYy9saWIvbmd4LW1hc2sucHJvdmlkZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBd0IsTUFBTSxFQUFFLHdCQUF3QixFQUFZLE1BQU0sZUFBZSxDQUFDO0FBRWpHLE9BQU8sRUFDSCxlQUFlLEVBQ2YsY0FBYyxFQUNkLGFBQWEsRUFDYixVQUFVLEdBRWIsTUFBTSxtQkFBbUIsQ0FBQztBQUMzQixPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUVuRTs7R0FFRztBQUNILFNBQVMsY0FBYztJQUNuQixNQUFNLFVBQVUsR0FBRyxNQUFNLENBQWdCLGNBQWMsQ0FBQyxDQUFDO0lBQ3pELE1BQU0sV0FBVyxHQUFHLE1BQU0sQ0FBd0MsVUFBVSxDQUFDLENBQUM7SUFFOUUsT0FBTyxXQUFXLFlBQVksUUFBUTtRQUNsQyxDQUFDLENBQUMsRUFBRSxHQUFHLFVBQVUsRUFBRSxHQUFHLFdBQVcsRUFBRSxFQUFFO1FBQ3JDLENBQUMsQ0FBQyxFQUFFLEdBQUcsVUFBVSxFQUFFLEdBQUcsV0FBVyxFQUFFLENBQUM7QUFDNUMsQ0FBQztBQUVELE1BQU0sVUFBVSxjQUFjLENBQUMsV0FBbUQ7SUFDOUUsT0FBTztRQUNIO1lBQ0ksT0FBTyxFQUFFLFVBQVU7WUFDbkIsUUFBUSxFQUFFLFdBQVc7U0FDeEI7UUFDRDtZQUNJLE9BQU8sRUFBRSxjQUFjO1lBQ3ZCLFFBQVEsRUFBRSxhQUFhO1NBQzFCO1FBQ0Q7WUFDSSxPQUFPLEVBQUUsZUFBZTtZQUN4QixVQUFVLEVBQUUsY0FBYztTQUM3QjtRQUNELHFCQUFxQjtLQUN4QixDQUFDO0FBQ04sQ0FBQztBQUVELE1BQU0sVUFBVSx5QkFBeUIsQ0FDckMsV0FBbUQ7SUFFbkQsT0FBTyx3QkFBd0IsQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztBQUNqRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRW52aXJvbm1lbnRQcm92aWRlcnMsIGluamVjdCwgbWFrZUVudmlyb25tZW50UHJvdmlkZXJzLCBQcm92aWRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQge1xuICAgIE5HWF9NQVNLX0NPTkZJRyxcbiAgICBJTklUSUFMX0NPTkZJRyxcbiAgICBpbml0aWFsQ29uZmlnLFxuICAgIE5FV19DT05GSUcsXG4gICAgb3B0aW9uc0NvbmZpZyxcbn0gZnJvbSAnLi9uZ3gtbWFzay5jb25maWcnO1xuaW1wb3J0IHsgTmd4TWFza0FwcGxpZXJTZXJ2aWNlIH0gZnJvbSAnLi9uZ3gtbWFzay1hcHBsaWVyLnNlcnZpY2UnO1xuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBfY29uZmlnRmFjdG9yeSgpOiBvcHRpb25zQ29uZmlnIHtcbiAgICBjb25zdCBpbml0Q29uZmlnID0gaW5qZWN0PG9wdGlvbnNDb25maWc+KElOSVRJQUxfQ09ORklHKTtcbiAgICBjb25zdCBjb25maWdWYWx1ZSA9IGluamVjdDxvcHRpb25zQ29uZmlnIHwgKCgpID0+IG9wdGlvbnNDb25maWcpPihORVdfQ09ORklHKTtcblxuICAgIHJldHVybiBjb25maWdWYWx1ZSBpbnN0YW5jZW9mIEZ1bmN0aW9uXG4gICAgICAgID8geyAuLi5pbml0Q29uZmlnLCAuLi5jb25maWdWYWx1ZSgpIH1cbiAgICAgICAgOiB7IC4uLmluaXRDb25maWcsIC4uLmNvbmZpZ1ZhbHVlIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm92aWRlTmd4TWFzayhjb25maWdWYWx1ZT86IG9wdGlvbnNDb25maWcgfCAoKCkgPT4gb3B0aW9uc0NvbmZpZykpOiBQcm92aWRlcltdIHtcbiAgICByZXR1cm4gW1xuICAgICAgICB7XG4gICAgICAgICAgICBwcm92aWRlOiBORVdfQ09ORklHLFxuICAgICAgICAgICAgdXNlVmFsdWU6IGNvbmZpZ1ZhbHVlLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBwcm92aWRlOiBJTklUSUFMX0NPTkZJRyxcbiAgICAgICAgICAgIHVzZVZhbHVlOiBpbml0aWFsQ29uZmlnLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBwcm92aWRlOiBOR1hfTUFTS19DT05GSUcsXG4gICAgICAgICAgICB1c2VGYWN0b3J5OiBfY29uZmlnRmFjdG9yeSxcbiAgICAgICAgfSxcbiAgICAgICAgTmd4TWFza0FwcGxpZXJTZXJ2aWNlLFxuICAgIF07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm92aWRlRW52aXJvbm1lbnROZ3hNYXNrKFxuICAgIGNvbmZpZ1ZhbHVlPzogb3B0aW9uc0NvbmZpZyB8ICgoKSA9PiBvcHRpb25zQ29uZmlnKVxuKTogRW52aXJvbm1lbnRQcm92aWRlcnMge1xuICAgIHJldHVybiBtYWtlRW52aXJvbm1lbnRQcm92aWRlcnMocHJvdmlkZU5neE1hc2soY29uZmlnVmFsdWUpKTtcbn1cbiJdfQ==